spring.application.name=app

# 8080はappプロジェクトで使用しているため
server.port=8080

#AWSのDB接続設定 : MySQLのケース
#spring.datasource.url=jdbc:mysql://<aurora-db-endpoint>:3306/<database-name>
#spring.datasource.username=<db-username>
#spring.datasource.password=<db-password>


# ローカルテスト用 H2DB設定 batchとDBを共有するためファイル参照する形式の設定値にする
# メモリ指定時デバッグURL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
# ファイル指定時デバッグURL: jdbc:h2:file:./data/testdb;AUTO_SERVER=TRUE
# AUTO_SERVER=TRUE で複数アプリからー参照できるDBになる
#spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.url=jdbc:h2:file:./data/testdb;AUTO_SERVER=TRUE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# プラウザアクセス http://localhost:8080/h2-console での確認可否設定
spring.h2.console.enabled=true


#初期データ投入処理 3行目の記述がないと無いとデータ入らないので注意
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql
spring.jpa.defer-datasource-initialization=false
# ファイル参照で初期データを投入する場合、以下の2行の記述が必要
spring.sql.init.mode=always
spring.sql.init.platform=h2


# Hibernate設定（JPA用） エンティティに応じたスキーマ処理 : 更新
spring.jpa.hibernate.ddl-auto=update
# sqlの出力 OFF
spring.jpa.show-sql=true